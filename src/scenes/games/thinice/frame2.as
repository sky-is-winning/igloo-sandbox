    function getCoins() {
        var _local_2 = new Object();
        _local_2.score = score;
        _local_2.coins = Math.floor(_local_2.score / 10);
        _root.showWindow("Game Over", _local_2);
    }
    function buildMap() {
        d = 0;
        var _local_3 = 0;
        while (_local_3 < mapHeight) {
            var _local_2 = 0;
            while (_local_2 < mapWidth) {
                this.map.attachMovie("tile", (("t_" + _local_3) + "_") + _local_2, ++d);
                this.map[(("t_" + _local_3) + "_") + _local_2]._x = _local_2 * tileSize;
                this.map[(("t_" + _local_3) + "_") + _local_2]._y = _local_3 * tileSize;
                this.map[(("t_" + _local_3) + "_") + _local_2].gotoAndStop(myMap[_local_3][_local_2]);
                _local_2++;
            }
            _local_3++;
        }
        tilesFlipped = 0;
    }
    function buildLevel1() {
        myMap = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1], [1, 20, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 1, 1, 1], [1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];
        buildMap();
        goal = 12;
    }
    function buildLevel2() {
        if (randomNumber == 0) {
            myMap = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 5, 20, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 20, 1, 1, 1], [1, 20, 20, 20, 20, 20, 20, 20, 1, 20, 20, 20, 20, 20, 2, 20, 1, 1, 1], [1, 20, 2, 2, 2, 2, 2, 20, 1, 20, 2, 2, 2, 2, 2, 20, 1, 1, 1], [1, 20, 20, 20, 20, 20, 2, 20, 20, 20, 2, 20, 20, 20, 20, 20, 1, 1, 1], [1, 1, 1, 1, 1, 20, 2, 2, 2, 2, 2, 20, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];
        } else {
            myMap = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 1, 1, 1], [1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 1, 20, 5, 20, 1, 1, 1], [1, 1, 1, 1, 1, 20, 2, 2, 2, 2, 2, 20, 1, 20, 2, 20, 1, 1, 1], [1, 20, 20, 20, 20, 20, 2, 20, 20, 20, 2, 20, 20, 20, 2, 20, 1, 1, 1], [1, 20, 2, 2, 2, 2, 2, 20, 1, 20, 2, 2, 2, 2, 2, 20, 1, 1, 1], [1, 20, 20, 20, 20, 20, 20, 20, 1, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];
        }
        buildMap();
        goal = 19;
    }
    function buildLevel3() {
        if (randomNumber == 0) {
            myMap = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 1, 1, 1], [1, 1, 20, 5, 20, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 20, 1, 1, 1], [1, 1, 20, 2, 20, 20, 20, 20, 20, 1, 1, 1, 1, 20, 2, 20, 1, 1, 1], [1, 1, 20, 2, 20, 20, 2, 2, 20, 20, 20, 20, 20, 20, 2, 20, 1, 1, 1], [1, 1, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 1, 1, 1], [1, 1, 20, 2, 2, 20, 20, 20, 20, 2, 2, 20, 20, 2, 2, 20, 1, 1, 1], [1, 1, 20, 20, 20, 20, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];
        } else {
            myMap = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 1, 1, 1], [1, 1, 20, 5, 20, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 20, 1, 1, 1], [1, 1, 20, 2, 20, 1, 1, 1, 1, 20, 20, 20, 20, 20, 2, 20, 1, 1, 1], [1, 1, 20, 2, 20, 20, 20, 20, 20, 20, 2, 2, 20, 20, 2, 20, 1, 1, 1], [1, 1, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 1, 1, 1], [1, 1, 20, 2, 2, 20, 20, 2, 2, 20, 20, 20, 20, 2, 2, 20, 1, 1, 1], [1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 20, 20, 20, 20, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];
        }
        buildMap();
        goal = 25;
    }
    function buildLevel4() {
        if (randomNumber == 0) {
            myMap = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 1, 1], [1, 20, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 2, 2, 2, 20, 1, 1], [1, 20, 2, 20, 2, 20, 20, 2, 2, 2, 2, 20, 20, 2, 20, 2, 20, 1, 1], [1, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 1, 1], [1, 20, 20, 2, 20, 20, 20, 20, 2, 2, 20, 20, 20, 20, 2, 20, 20, 1, 1], [1, 1, 20, 2, 20, 1, 20, 2, 2, 2, 2, 20, 1, 20, 2, 20, 1, 1, 1], [1, 1, 20, 2, 20, 1, 20, 2, 2, 2, 2, 20, 1, 20, 5, 20, 1, 1, 1], [1, 1, 20, 20, 20, 1, 20, 20, 20, 20, 20, 20, 1, 20, 20, 20, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];
        } else {
            myMap = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 1, 1], [1, 20, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 2, 2, 2, 20, 1, 1], [1, 20, 2, 2, 2, 20, 20, 2, 2, 2, 2, 20, 20, 2, 2, 2, 20, 1, 1], [1, 20, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 20, 1, 1], [1, 1, 20, 2, 20, 20, 20, 20, 2, 2, 20, 20, 20, 20, 2, 20, 1, 1, 1], [1, 1, 20, 2, 20, 1, 20, 2, 2, 2, 2, 20, 1, 20, 2, 20, 1, 1, 1], [1, 1, 20, 2, 20, 1, 20, 2, 2, 2, 2, 20, 1, 20, 5, 20, 1, 1, 1], [1, 1, 20, 20, 20, 1, 20, 20, 20, 20, 20, 20, 1, 20, 20, 20, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];
        }
        if (lastStageSolved == true) {
            myMap[7][7] = 7;
        }
        buildMap();
        goal = 43;
    }
    function buildLevel5() {
        if (randomNumber == 0) {
            myMap = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 20, 1, 1, 1], [1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2, 20, 20, 20, 1], [1, 20, 20, 20, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 1], [1, 20, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 1], [1, 20, 20, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 1], [1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];
        } else {
            myMap = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 2, 20, 1, 1, 1], [1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2, 20, 20, 20, 1], [1, 20, 20, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 1], [1, 20, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 1], [1, 20, 20, 20, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 1], [1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];
        }
        if (lastStageSolved == true) {
            myMap[10][9] = 7;
        }
        buildMap();
        goal = 41;
    }
    function buildLevel6() {
        if (randomNumber == 0) {
            myMap = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 5, 20, 1, 1, 1], [1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2, 20, 20, 20, 1], [1, 20, 20, 20, 20, 2, 2, 2, 20, 2, 2, 2, 2, 20, 2, 2, 2, 20, 1], [1, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 2, 2, 2, 20, 1], [1, 20, 20, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 1], [1, 1, 1, 20, 20, 20, 20, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 1], [1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];
        } else {
            myMap = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 1, 1, 1], [1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 1, 1, 20, 5, 20, 1, 1, 1], [1, 1, 1, 20, 20, 20, 20, 2, 2, 2, 20, 20, 20, 20, 2, 20, 20, 20, 1], [1, 20, 20, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 2, 2, 2, 20, 1], [1, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 2, 2, 2, 20, 1], [1, 20, 20, 20, 20, 2, 2, 2, 20, 2, 2, 2, 2, 2, 2, 2, 2, 20, 1], [1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];
        }
        if (lastStageSolved == true) {
            myMap[11][10] = 7;
        }
        buildMap();
        goal = 41;
    }
    function buildLevel7() {
        if (randomNumber == 0) {
            myMap = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1], [1, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 1, 1, 1], [1, 20, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2, 20, 20, 20, 20], [1, 20, 2, 20, 20, 20, 5, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 20], [1, 20, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2, 20, 20, 2, 20], [1, 20, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2, 20, 20, 2, 20], [1, 20, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2, 20], [1, 20, 2, 20, 20, 2, 2, 2, 2, 20, 20, 2, 2, 20, 20, 20, 20, 2, 20], [1, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [1, 20, 20, 20, 20, 20, 20, 20, 2, 2, 2, 2, 2, 2, 20, 20, 20, 20, 20], [1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];
        } else {
            myMap = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1], [1, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 1, 1, 1], [1, 20, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2, 20, 20, 20, 20], [1, 20, 2, 20, 20, 20, 5, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 20], [1, 20, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2, 20, 20, 2, 20], [1, 20, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2, 20, 20, 2, 20], [1, 20, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2, 20], [1, 20, 2, 20, 20, 20, 20, 2, 2, 20, 20, 2, 2, 2, 2, 20, 20, 2, 20], [1, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [1, 20, 20, 20, 20, 20, 2, 2, 2, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20], [1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];
        }
        if (lastStageSolved == true) {
            myMap[9][11] = 7;
        }
        buildMap();
        goal = 66;
    }
    function buildLevel8() {
        if (randomNumber == 0) {
            myMap = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [20, 20, 20, 20, 20, 1, 1, 1, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1], [20, 2, 2, 2, 20, 20, 20, 20, 20, 2, 2, 2, 20, 1, 1, 1, 1, 1, 1], [20, 2, 20, 2, 20, 20, 2, 20, 20, 2, 20, 2, 20, 1, 1, 1, 1, 1, 1], [20, 2, 2, 4, 2, 2, 4, 2, 2, 4, 2, 2, 20, 20, 20, 20, 1, 1, 1], [20, 20, 20, 2, 20, 20, 2, 20, 20, 2, 20, 20, 20, 20, 5, 20, 1, 1, 1], [1, 20, 20, 2, 20, 20, 2, 20, 20, 2, 20, 20, 20, 20, 2, 20, 1, 1, 1], [1, 20, 2, 2, 2, 2, 4, 2, 2, 4, 2, 2, 20, 2, 2, 20, 20, 1, 1], [1, 20, 2, 2, 2, 20, 2, 20, 20, 2, 20, 2, 20, 2, 2, 2, 20, 1, 1], [1, 20, 2, 2, 2, 2, 2, 20, 20, 2, 2, 2, 20, 20, 2, 2, 20, 1, 1], [1, 20, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2, 2, 20, 1, 1], [1, 20, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 1, 1], [1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1]];
        } else {
            myMap = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [20, 20, 20, 20, 20, 1, 1, 1, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1], [20, 2, 2, 2, 20, 20, 20, 20, 20, 2, 2, 2, 20, 1, 1, 1, 1, 1, 1], [20, 2, 20, 2, 20, 20, 2, 20, 20, 2, 20, 2, 20, 1, 1, 1, 1, 1, 1], [20, 2, 2, 4, 2, 2, 4, 2, 2, 4, 2, 2, 20, 20, 20, 20, 1, 1, 1], [20, 20, 20, 2, 20, 20, 2, 20, 20, 2, 20, 20, 20, 20, 5, 20, 1, 1, 1], [1, 20, 20, 2, 20, 20, 2, 20, 20, 2, 20, 20, 20, 20, 2, 20, 20, 1, 1], [1, 20, 2, 2, 2, 2, 4, 2, 2, 4, 2, 2, 20, 20, 2, 2, 20, 1, 1], [1, 20, 2, 2, 2, 20, 2, 20, 20, 2, 20, 2, 20, 2, 2, 2, 20, 1, 1], [1, 20, 2, 2, 2, 2, 2, 20, 20, 2, 2, 2, 20, 2, 20, 20, 20, 1, 1], [1, 20, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2, 2, 2, 20, 1, 1], [1, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 1, 1], [1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1]];
        }
        if (lastStageSolved == true) {
            myMap[10][2] = 7;
        }
        buildMap();
        goal = 82;
    }
    function buildLevel9() {
        if (randomNumber == 0) {
            myMap = [[1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1], [1, 20, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 1], [1, 20, 2, 2, 20, 20, 20, 20, 4, 4, 2, 2, 2, 2, 4, 2, 2, 20, 1], [1, 20, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 20, 1], [1, 20, 20, 20, 2, 4, 20, 20, 20, 2, 20, 20, 20, 20, 2, 20, 20, 20, 1], [1, 1, 1, 20, 2, 4, 20, 20, 20, 5, 20, 2, 2, 20, 2, 20, 1, 1, 1], [1, 20, 20, 20, 2, 4, 20, 20, 20, 20, 20, 2, 2, 20, 2, 20, 1, 1, 1], [1, 20, 2, 2, 2, 2, 2, 20, 20, 20, 20, 2, 2, 20, 2, 20, 1, 1, 1], [1, 20, 2, 20, 20, 20, 2, 2, 2, 2, 2, 2, 2, 20, 20, 20, 1, 1, 1], [1, 20, 2, 20, 20, 20, 2, 2, 2, 2, 2, 20, 2, 20, 1, 1, 1, 1, 1], [1, 20, 2, 2, 2, 2, 2, 20, 20, 20, 2, 2, 2, 20, 1, 1, 1, 1, 1], [1, 20, 20, 20, 20, 20, 20, 20, 1, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];
        } else {
            myMap = [[1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1], [1, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 20, 1], [1, 20, 2, 20, 20, 20, 20, 2, 4, 2, 2, 2, 2, 2, 2, 4, 2, 20, 1], [1, 20, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 1], [1, 20, 2, 4, 20, 20, 20, 20, 20, 2, 20, 20, 20, 20, 2, 20, 20, 20, 1], [1, 20, 2, 4, 20, 20, 20, 20, 20, 5, 20, 2, 2, 20, 2, 20, 1, 1, 1], [1, 20, 2, 4, 20, 20, 20, 20, 20, 20, 20, 2, 2, 20, 2, 20, 1, 1, 1], [1, 20, 2, 2, 20, 20, 20, 20, 2, 2, 2, 2, 2, 20, 2, 20, 1, 1, 1], [1, 20, 2, 2, 2, 4, 4, 2, 2, 20, 20, 20, 2, 20, 20, 20, 1, 1, 1], [1, 20, 2, 20, 2, 2, 2, 2, 2, 20, 20, 20, 2, 20, 1, 1, 1, 1, 1], [1, 20, 2, 2, 2, 20, 20, 20, 2, 2, 2, 2, 2, 20, 1, 1, 1, 1, 1], [1, 20, 20, 20, 20, 20, 1, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];
        }
        if (lastStageSolved == true) {
            myMap[3][6] = 7;
        }
        buildMap();
        goal = 93;
    }
    function buildLevel10() {
        if (randomNumber == 0) {
            myMap = [[20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20], [20, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 2, 20], [20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 20], [20, 2, 2, 2, 2, 2, 2, 20, 20, 20, 20, 20, 20, 2, 2, 2, 4, 2, 20], [20, 2, 2, 2, 2, 2, 2, 20, 20, 2, 20, 20, 4, 4, 2, 2, 4, 2, 20], [20, 2, 2, 2, 2, 2, 2, 20, 20, 2, 20, 20, 4, 4, 2, 2, 2, 2, 20], [20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 2, 2, 2, 2, 2, 2, 20, 20, 20, 2, 2, 2, 2, 20, 20, 20, 2, 20], [20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 21, 2, 20, 2, 20], [20, 2, 20, 20, 20, 2, 2, 20, 20, 20, 2, 2, 2, 2, 20, 5, 20, 2, 20], [20, 2, 20, 20, 2, 4, 4, 2, 2, 2, 2, 2, 2, 2, 20, 20, 20, 2, 20], [20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]];
        } else {
            myMap = [[20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20], [20, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 4, 2, 20], [20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 20], [20, 2, 2, 2, 2, 2, 2, 20, 20, 20, 20, 20, 20, 2, 2, 2, 4, 2, 20], [20, 2, 2, 2, 2, 2, 2, 20, 20, 2, 20, 20, 4, 4, 2, 2, 4, 2, 20], [20, 2, 2, 2, 2, 2, 2, 20, 20, 2, 20, 20, 4, 4, 2, 2, 2, 2, 20], [20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 2, 2, 2, 2, 2, 2, 20, 20, 20, 2, 2, 2, 2, 20, 20, 20, 2, 20], [20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 21, 2, 20, 2, 20], [20, 2, 2, 20, 20, 2, 2, 20, 20, 20, 2, 2, 2, 2, 20, 5, 20, 2, 20], [20, 2, 2, 20, 20, 4, 4, 2, 2, 20, 2, 2, 2, 2, 20, 20, 20, 2, 20], [20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]];
        }
        if (lastStageSolved == true) {
            myMap[5][14] = 7;
        }
        buildMap();
        goal = 208;
    }
    function buildLevel11() {
        if (randomNumber == 0) {
            myMap = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 5, 20, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 2, 20, 20, 20], [1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 4, 2, 4, 2, 4, 20], [1, 1, 20, 2, 2, 2, 2, 2, 2, 2, 2, 20, 20, 4, 20, 2, 20, 4, 20], [1, 1, 20, 2, 2, 2, 20, 20, 20, 20, 2, 2, 20, 2, 2, 4, 2, 2, 20], [1, 1, 20, 2, 2, 2, 2, 4, 2, 20, 2, 2, 20, 20, 20, 2, 20, 20, 20], [1, 20, 20, 20, 4, 2, 20, 2, 2, 20, 2, 2, 4, 2, 20, 2, 20, 20, 20], [1, 20, 2, 2, 4, 20, 20, 20, 2, 20, 20, 20, 2, 20, 20, 21, 20, 20, 20], [1, 20, 2, 20, 2, 2, 6, 20, 4, 2, 2, 2, 2, 20, 2, 4, 4, 4, 20], [1, 20, 2, 20, 2, 20, 2, 20, 4, 20, 2, 2, 2, 20, 2, 20, 20, 4, 20], [1, 20, 2, 2, 4, 20, 2, 20, 2, 20, 2, 2, 2, 20, 2, 2, 20, 4, 20], [1, 20, 20, 20, 2, 2, 4, 4, 2, 20, 2, 2, 2, 20, 20, 20, 20, 4, 20], [1, 1, 1, 20, 2, 2, 20, 2, 2, 20, 2, 2, 4, 4, 4, 4, 4, 4, 20], [1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]];
        } else {
            myMap = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 5, 20, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 2, 20, 20, 20], [1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 2, 2, 4, 2, 2, 20], [1, 1, 20, 2, 2, 2, 2, 2, 2, 2, 2, 20, 20, 4, 20, 2, 20, 4, 20], [1, 1, 20, 2, 2, 2, 20, 20, 20, 20, 2, 2, 20, 4, 2, 4, 2, 4, 20], [1, 1, 20, 2, 2, 2, 2, 4, 2, 20, 2, 2, 20, 20, 20, 2, 20, 20, 20], [1, 20, 20, 20, 4, 2, 20, 2, 2, 20, 2, 2, 4, 2, 20, 2, 20, 20, 20], [1, 20, 2, 2, 4, 20, 20, 20, 2, 20, 20, 20, 2, 20, 20, 21, 20, 20, 20], [1, 20, 2, 20, 2, 2, 6, 20, 4, 2, 2, 2, 2, 20, 2, 4, 4, 4, 20], [1, 20, 2, 20, 2, 20, 2, 20, 4, 20, 2, 2, 2, 20, 2, 20, 20, 4, 20], [1, 20, 2, 2, 4, 20, 2, 20, 2, 20, 2, 2, 2, 20, 2, 2, 20, 4, 20], [1, 20, 20, 20, 2, 2, 4, 4, 2, 20, 2, 2, 2, 20, 20, 20, 20, 4, 20], [1, 1, 1, 20, 2, 2, 20, 2, 2, 20, 2, 2, 4, 4, 4, 4, 4, 4, 20], [1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]];
        }
        if (lastStageSolved == true) {
            myMap[13][8] = 7;
        }
        buildMap();
        goal = 132;
    }
    function buildLevel12() {
        if (randomNumber == 0) {
            myMap = [[1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 1, 20, 20, 20, 20, 20, 20, 1, 1], [1, 1, 1, 1, 1, 1, 20, 2, 2, 20, 20, 20, 2, 2, 20, 2, 20, 1, 1], [1, 1, 1, 1, 1, 1, 20, 2, 4, 2, 2, 2, 4, 2, 20, 2, 20, 1, 1], [1, 1, 1, 1, 1, 20, 20, 20, 2, 20, 20, 20, 2, 20, 20, 2, 20, 20, 1], [20, 20, 20, 20, 20, 20, 2, 2, 4, 20, 20, 20, 2, 2, 2, 4, 2, 20, 1], [20, 2, 2, 20, 20, 20, 2, 20, 2, 20, 2, 20, 2, 20, 20, 2, 20, 20, 1], [20, 2, 4, 2, 2, 2, 4, 2, 4, 2, 4, 20, 4, 2, 2, 4, 20, 1, 1], [20, 2, 4, 2, 2, 2, 2, 20, 2, 20, 2, 20, 2, 20, 20, 2, 20, 1, 1], [20, 2, 4, 4, 20, 4, 4, 2, 4, 2, 4, 2, 4, 2, 20, 2, 20, 20, 20], [20, 2, 4, 4, 20, 2, 2, 20, 2, 20, 2, 20, 2, 20, 20, 2, 2, 2, 20], [20, 2, 4, 4, 20, 20, 2, 2, 4, 2, 4, 2, 4, 2, 20, 20, 20, 21, 20], [20, 2, 4, 4, 20, 20, 2, 2, 20, 20, 2, 20, 2, 2, 20, 5, 2, 2, 20], [20, 2, 4, 4, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20], [20, 2, 2, 2, 6, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [20, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];
        } else {
            myMap = [[1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 1, 20, 20, 20, 20, 20, 20, 1, 1], [1, 1, 1, 1, 1, 1, 20, 2, 2, 20, 20, 20, 2, 2, 20, 2, 20, 1, 1], [1, 1, 1, 1, 1, 1, 20, 2, 4, 2, 2, 2, 4, 2, 20, 2, 20, 1, 1], [1, 1, 1, 1, 1, 20, 20, 20, 2, 20, 20, 20, 2, 20, 20, 2, 20, 1, 1], [20, 20, 20, 20, 20, 20, 2, 2, 4, 20, 20, 20, 2, 2, 2, 4, 20, 1, 1], [20, 2, 2, 20, 20, 20, 2, 20, 2, 20, 2, 20, 2, 20, 20, 2, 20, 20, 1], [20, 2, 4, 2, 2, 2, 4, 2, 4, 2, 4, 20, 4, 2, 2, 4, 2, 20, 1], [20, 2, 4, 2, 2, 2, 2, 20, 2, 20, 2, 20, 2, 20, 20, 2, 20, 20, 1], [20, 2, 4, 4, 20, 4, 4, 2, 4, 2, 4, 2, 4, 2, 20, 2, 20, 20, 20], [20, 2, 4, 4, 20, 2, 2, 20, 2, 20, 2, 20, 2, 20, 20, 2, 2, 2, 20], [20, 2, 4, 4, 20, 20, 2, 2, 4, 2, 4, 2, 4, 2, 20, 20, 20, 21, 20], [20, 2, 4, 4, 20, 20, 2, 2, 20, 20, 2, 20, 2, 2, 20, 5, 2, 2, 20], [20, 2, 4, 4, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20], [20, 2, 2, 2, 6, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [20, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];
        }
        if (lastStageSolved == true) {
            myMap[7][10] = 7;
        }
        buildMap();
        goal = 138;
    }
    function buildLevel13() {
        if (randomNumber == 0) {
            myMap = [[1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 1, 20, 20, 20, 1, 1, 1, 1], [1, 1, 20, 20, 20, 20, 20, 20, 2, 2, 20, 20, 20, 2, 20, 1, 1, 1, 1], [1, 1, 20, 2, 2, 20, 2, 2, 2, 4, 2, 2, 4, 4, 20, 1, 1, 1, 1], [1, 1, 20, 2, 2, 2, 2, 2, 2, 2, 20, 20, 2, 2, 20, 1, 1, 1, 1], [1, 1, 20, 2, 20, 20, 20, 2, 2, 2, 2, 2, 2, 2, 20, 20, 1, 1, 1], [1, 1, 20, 2, 20, 3, 20, 20, 20, 20, 20, 4, 4, 4, 2, 20, 1, 1, 1], [1, 1, 20, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 20, 20, 1, 1, 1], [1, 1, 20, 2, 20, 2, 20, 20, 2, 2, 2, 4, 4, 4, 20, 1, 1, 1, 1], [20, 20, 20, 2, 20, 2, 20, 2, 2, 2, 2, 2, 2, 4, 20, 1, 1, 1, 1], [20, 6, 20, 2, 20, 2, 20, 2, 2, 2, 2, 4, 4, 4, 20, 1, 1, 1, 1], [20, 4, 20, 2, 20, 2, 20, 20, 20, 20, 20, 4, 2, 20, 20, 20, 20, 20, 1], [20, 4, 20, 2, 4, 2, 20, 5, 2, 21, 2, 4, 20, 20, 2, 2, 2, 20, 1], [20, 4, 20, 20, 4, 20, 20, 20, 20, 20, 20, 2, 2, 2, 4, 2, 2, 20, 1], [20, 4, 4, 4, 4, 20, 1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 1], [20, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];
        } else {
            myMap = [[1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 1, 20, 20, 20, 1, 1, 1, 1], [1, 1, 20, 20, 20, 20, 20, 20, 2, 2, 20, 20, 20, 2, 20, 1, 1, 1, 1], [1, 1, 20, 2, 2, 20, 2, 2, 2, 4, 2, 2, 4, 4, 20, 1, 1, 1, 1], [1, 1, 20, 2, 2, 2, 2, 2, 2, 2, 20, 20, 2, 2, 20, 1, 1, 1, 1], [1, 20, 20, 2, 20, 20, 20, 2, 2, 2, 2, 2, 2, 2, 20, 20, 1, 1, 1], [1, 20, 2, 4, 20, 3, 20, 20, 20, 20, 20, 4, 4, 4, 2, 20, 1, 1, 1], [1, 20, 20, 2, 20, 2, 2, 2, 2, 2, 2, 4, 2, 2, 20, 20, 1, 1, 1], [1, 1, 20, 2, 20, 2, 20, 20, 2, 2, 2, 4, 4, 4, 20, 1, 1, 1, 1], [20, 20, 20, 2, 20, 2, 20, 2, 2, 2, 2, 2, 2, 4, 20, 1, 1, 1, 1], [20, 6, 20, 2, 20, 2, 20, 2, 2, 2, 2, 4, 4, 4, 20, 1, 1, 1, 1], [20, 4, 20, 2, 20, 2, 20, 20, 20, 20, 20, 4, 2, 20, 20, 20, 20, 20, 1], [20, 4, 20, 2, 4, 2, 20, 5, 2, 21, 2, 4, 20, 20, 2, 2, 2, 20, 1], [20, 4, 20, 20, 4, 20, 20, 20, 20, 20, 20, 2, 2, 2, 4, 2, 2, 20, 1], [20, 4, 4, 4, 4, 20, 1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 1], [20, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];
        }
        if (lastStageSolved == true) {
            myMap[7][9] = 7;
        }
        buildMap();
        goal = 128;
        movablePositionX = 276;
        movablePositionY = 276;
        movable._x = movablePositionX;
        movable._y = movablePositionY;
    }
    function buildLevel14() {
        if (randomNumber == 0) {
            myMap = [[20, 20, 20, 20, 20, 20, 1, 1, 1, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1], [20, 2, 2, 2, 2, 20, 1, 1, 1, 20, 2, 2, 20, 20, 20, 1, 1, 1, 1], [20, 2, 2, 2, 2, 20, 20, 20, 1, 20, 2, 2, 2, 2, 20, 1, 1, 1, 1], [20, 20, 2, 2, 2, 2, 2, 20, 20, 20, 2, 2, 2, 2, 20, 20, 1, 1, 1], [1, 20, 2, 2, 2, 2, 4, 2, 2, 20, 2, 2, 2, 4, 2, 20, 20, 1, 1], [1, 20, 2, 20, 20, 2, 2, 20, 2, 20, 20, 2, 2, 2, 4, 2, 20, 1, 1], [20, 20, 2, 2, 20, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 20, 20, 20, 1], [20, 2, 2, 2, 20, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 6, 20, 1], [20, 2, 2, 2, 20, 2, 20, 4, 20, 20, 20, 2, 20, 2, 2, 2, 2, 20, 1], [20, 2, 2, 20, 20, 2, 2, 4, 2, 2, 20, 4, 2, 2, 2, 20, 20, 20, 1], [20, 20, 2, 20, 20, 20, 20, 20, 20, 2, 20, 2, 2, 2, 4, 2, 20, 1, 1], [1, 20, 2, 20, 20, 20, 20, 2, 2, 2, 20, 2, 2, 4, 2, 20, 20, 1, 1], [1, 20, 2, 21, 2, 5, 20, 2, 2, 2, 20, 2, 2, 2, 20, 20, 1, 1, 1], [1, 20, 3, 20, 20, 20, 20, 2, 2, 2, 20, 20, 2, 2, 20, 1, 1, 1, 1], [1, 20, 20, 20, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1, 1]];
        } else {
            myMap = [[20, 20, 20, 20, 20, 20, 1, 1, 1, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1], [20, 2, 2, 2, 2, 20, 1, 1, 1, 20, 2, 2, 20, 20, 20, 1, 1, 1, 1], [20, 2, 2, 2, 2, 20, 20, 20, 1, 20, 2, 2, 2, 2, 20, 1, 1, 1, 1], [20, 20, 2, 2, 2, 2, 2, 20, 20, 20, 2, 2, 2, 2, 20, 20, 1, 1, 1], [1, 20, 2, 2, 2, 2, 4, 2, 2, 20, 2, 2, 2, 4, 2, 20, 20, 1, 1], [20, 20, 2, 20, 20, 2, 2, 20, 2, 20, 20, 2, 2, 2, 4, 2, 20, 1, 1], [20, 2, 2, 20, 20, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 20, 20, 20, 1], [20, 2, 2, 2, 20, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 6, 20, 1], [20, 2, 2, 2, 20, 2, 20, 4, 20, 20, 20, 2, 20, 2, 2, 2, 2, 20, 1], [20, 20, 2, 2, 20, 2, 2, 4, 2, 2, 20, 4, 2, 2, 2, 20, 20, 20, 1], [20, 20, 2, 20, 20, 20, 20, 20, 20, 2, 20, 2, 2, 2, 4, 2, 20, 1, 1], [1, 20, 2, 20, 20, 20, 20, 2, 2, 2, 20, 2, 2, 4, 2, 20, 20, 1, 1], [1, 20, 2, 21, 2, 5, 20, 2, 2, 2, 20, 2, 2, 2, 20, 20, 1, 1, 1], [1, 20, 3, 20, 20, 20, 20, 2, 2, 2, 20, 20, 2, 2, 20, 1, 1, 1, 1], [1, 20, 20, 20, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1, 1]];
        }
        if (lastStageSolved == true) {
            myMap[3][6] = 7;
        }
        buildMap();
        goal = 131;
        movablePositionX = 324;
        movablePositionY = 252;
        movable._x = movablePositionX;
        movable._y = movablePositionY;
    }
    function buildLevel15() {
        if (randomNumber == 0) {
            myMap = [[20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20], [20, 2, 2, 2, 2, 2, 2, 2, 2, 20, 4, 4, 20, 4, 4, 2, 2, 2, 20], [20, 2, 20, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 2, 20, 2, 2, 20], [20, 2, 2, 2, 20, 2, 2, 2, 2, 2, 4, 4, 4, 4, 2, 20, 21, 20, 20], [20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 2, 20, 2, 5, 20], [20, 2, 2, 2, 2, 2, 4, 4, 4, 2, 4, 2, 2, 2, 2, 20, 20, 20, 20], [20, 2, 2, 2, 2, 2, 4, 2, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 20], [20, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 20, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 20], [20, 8, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 2, 2, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 20, 2, 2, 20], [20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 20, 20, 20, 20], [20, 2, 20, 2, 20, 2, 20, 2, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 2, 2, 2, 20, 20, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]];
        } else {
            myMap = [[20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20], [20, 2, 2, 2, 2, 2, 2, 2, 2, 20, 4, 4, 20, 4, 4, 2, 2, 2, 20], [20, 2, 20, 20, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 2, 20, 2, 2, 20], [20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 2, 20, 21, 20, 20], [20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 2, 20, 2, 5, 20], [20, 2, 2, 2, 2, 2, 4, 4, 4, 2, 4, 2, 2, 2, 2, 20, 20, 20, 20], [20, 2, 2, 2, 2, 2, 4, 2, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 20], [20, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 20, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 20], [20, 8, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 2, 2, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 20, 2, 2, 20], [20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 20, 20, 20, 20], [20, 2, 20, 2, 20, 2, 20, 2, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 2, 2, 2, 20, 20, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]];
        }
        if (lastStageSolved == true) {
            myMap[5][9] = 7;
        }
        buildMap();
        goal = 227;
        movablePositionX = 276;
        movablePositionY = 252;
        movable._x = movablePositionX;
        movable._y = movablePositionY;
    }
    function buildLevel16() {
        if (randomNumber == 0) {
            myMap = [[20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20], [20, 2, 2, 4, 2, 2, 2, 20, 20, 2, 2, 2, 2, 20, 2, 2, 2, 2, 20], [20, 2, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 20], [20, 2, 2, 2, 20, 20, 2, 2, 2, 2, 20, 20, 20, 2, 2, 20, 20, 20, 20], [20, 20, 20, 2, 20, 20, 20, 2, 2, 2, 20, 20, 20, 2, 2, 2, 2, 2, 20], [20, 20, 2, 2, 20, 20, 20, 2, 20, 2, 20, 20, 2, 2, 2, 2, 2, 20, 20], [20, 20, 2, 2, 2, 2, 2, 4, 2, 4, 2, 2, 2, 2, 2, 2, 2, 20, 20], [20, 20, 20, 2, 2, 2, 20, 2, 20, 2, 20, 2, 2, 2, 2, 2, 2, 2, 20], [20, 20, 20, 2, 2, 4, 2, 4, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 2, 2, 2, 2, 2, 20, 2, 20, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20], [20, 2, 2, 4, 2, 2, 2, 4, 2, 4, 2, 2, 20, 2, 2, 2, 2, 4, 20], [20, 2, 2, 2, 20, 2, 2, 4, 2, 4, 2, 2, 20, 21, 20, 5, 20, 4, 20], [20, 2, 2, 2, 2, 2, 2, 2, 20, 2, 2, 2, 2, 4, 20, 20, 20, 4, 20], [20, 2, 2, 20, 2, 2, 2, 2, 20, 3, 20, 2, 2, 4, 4, 4, 4, 9, 20], [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]];
        } else {
            myMap = [[20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20], [20, 2, 2, 4, 2, 2, 2, 20, 20, 2, 2, 2, 2, 20, 2, 2, 2, 2, 20], [20, 2, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 20], [20, 2, 2, 2, 20, 20, 2, 2, 2, 2, 20, 20, 20, 2, 2, 20, 20, 20, 20], [20, 20, 20, 2, 20, 20, 20, 2, 2, 2, 20, 20, 20, 2, 2, 2, 2, 2, 20], [20, 20, 2, 2, 20, 20, 20, 2, 20, 2, 20, 20, 2, 2, 2, 2, 2, 2, 20], [20, 20, 2, 2, 2, 2, 2, 4, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 20, 20, 2, 2, 2, 20, 2, 20, 2, 20, 2, 2, 2, 2, 2, 2, 20, 20], [20, 20, 20, 2, 2, 4, 2, 4, 2, 4, 2, 2, 2, 2, 2, 2, 2, 20, 20], [20, 2, 2, 2, 2, 2, 20, 2, 20, 2, 20, 20, 20, 20, 20, 20, 20, 20, 20], [20, 2, 2, 4, 2, 2, 2, 4, 2, 4, 2, 2, 20, 2, 2, 2, 2, 4, 20], [20, 2, 2, 2, 20, 2, 2, 4, 2, 4, 2, 2, 20, 21, 20, 5, 20, 4, 20], [20, 2, 2, 2, 2, 2, 2, 2, 20, 2, 2, 2, 2, 4, 20, 20, 20, 4, 20], [20, 2, 2, 20, 2, 2, 2, 2, 20, 3, 20, 2, 2, 4, 4, 4, 4, 9, 20], [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]];
        }
        if (lastStageSolved == true) {
            myMap[9][5] = 7;
        }
        buildMap();
        goal = 181;
        movablePositionX = 492;
        movablePositionY = 180;
        movable._x = movablePositionX;
        movable._y = movablePositionY;
    }
    function buildLevel17() {
        if (randomNumber == 0) {
            myMap = [[20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20], [20, 2, 2, 2, 2, 2, 20, 20, 3, 20, 2, 2, 2, 20, 6, 20, 2, 2, 20], [20, 2, 2, 2, 2, 2, 20, 2, 2, 2, 2, 20, 2, 20, 4, 2, 2, 2, 20], [20, 2, 2, 2, 2, 2, 20, 2, 2, 20, 20, 20, 4, 2, 2, 2, 20, 2, 20], [20, 2, 20, 20, 20, 2, 20, 2, 2, 20, 2, 4, 2, 20, 2, 2, 20, 2, 20], [20, 2, 20, 5, 20, 2, 20, 2, 2, 20, 20, 2, 4, 2, 4, 2, 20, 2, 20], [20, 4, 2, 2, 2, 2, 20, 2, 2, 20, 2, 4, 2, 2, 2, 20, 20, 2, 20], [20, 21, 20, 20, 20, 20, 20, 2, 2, 20, 20, 2, 4, 2, 20, 20, 2, 2, 20], [20, 2, 20, 2, 2, 2, 2, 2, 2, 20, 2, 2, 4, 20, 20, 2, 4, 2, 20], [20, 2, 20, 2, 2, 2, 2, 2, 2, 20, 2, 2, 2, 20, 20, 2, 2, 2, 20], [20, 2, 20, 20, 20, 20, 20, 20, 2, 20, 20, 20, 20, 20, 20, 20, 20, 2, 20], [20, 2, 11, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 2, 20], [20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 20, 20, 2, 20], [20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 11, 2, 2, 2, 2, 2, 2, 2, 20], [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]];
        } else {
            myMap = [[20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20], [20, 2, 2, 2, 2, 2, 20, 20, 3, 20, 2, 2, 2, 20, 6, 20, 2, 2, 20], [20, 2, 2, 2, 2, 2, 20, 2, 2, 2, 2, 20, 2, 20, 4, 2, 2, 2, 20], [20, 2, 2, 2, 2, 2, 20, 2, 2, 20, 20, 20, 4, 2, 2, 2, 20, 2, 20], [20, 2, 20, 20, 20, 2, 20, 2, 2, 20, 2, 4, 2, 20, 2, 2, 20, 2, 20], [20, 2, 20, 5, 20, 2, 20, 2, 2, 20, 20, 2, 4, 2, 4, 2, 20, 2, 20], [20, 4, 2, 2, 2, 2, 20, 2, 2, 20, 2, 4, 2, 2, 2, 20, 20, 2, 20], [20, 21, 20, 20, 20, 20, 20, 2, 2, 20, 20, 2, 4, 2, 20, 20, 2, 2, 20], [20, 2, 20, 2, 2, 2, 2, 2, 2, 20, 2, 2, 4, 20, 20, 2, 4, 2, 20], [20, 2, 20, 2, 2, 2, 2, 2, 2, 20, 2, 2, 2, 20, 20, 2, 2, 2, 20], [20, 2, 20, 20, 20, 20, 2, 2, 2, 20, 20, 20, 20, 20, 20, 20, 20, 2, 20], [20, 2, 11, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 2, 20], [20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 20, 20, 20, 20, 2, 20], [20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 11, 2, 2, 2, 2, 2, 2, 2, 20], [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]];
        }
        if (lastStageSolved == true) {
            myMap[5][7] = 7;
        }
        buildMap();
        goal = 161;
        movablePositionX = 276;
        movablePositionY = 324;
        movable._x = movablePositionX;
        movable._y = movablePositionY;
        warp1X = 204;
        warp1Y = 324;
        warp2X = 396;
        warp2Y = 372;
    }
    function buildLevel18() {
        if (randomNumber == 0) {
            myMap = [[20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20], [20, 20, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 11, 2, 2, 20], [20, 20, 20, 20, 20, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 20, 20, 20, 20, 2, 20, 11, 4, 2, 2, 2, 2, 2, 2, 2, 20, 2, 20], [20, 20, 20, 2, 2, 2, 20, 2, 4, 2, 2, 2, 2, 2, 2, 2, 20, 2, 20], [20, 20, 20, 20, 20, 20, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 20, 20, 5, 2, 2, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 20, 20, 20, 20, 21, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 2, 20], [20, 20, 20, 20, 20, 4, 4, 2, 2, 2, 20, 2, 2, 2, 2, 2, 20, 2, 20], [20, 2, 2, 2, 4, 2, 2, 2, 2, 2, 20, 2, 2, 2, 2, 2, 2, 2, 20], [20, 2, 20, 20, 4, 2, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 2, 20, 20, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 2, 20], [20, 2, 2, 2, 4, 2, 20, 20, 2, 2, 20, 20, 2, 2, 20, 2, 2, 2, 20], [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]];
        } else {
            myMap = [[20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20], [20, 20, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 11, 2, 2, 20], [20, 20, 20, 20, 20, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 20, 20, 20, 20, 2, 20, 11, 4, 2, 2, 2, 2, 2, 2, 2, 20, 2, 20], [20, 20, 20, 2, 2, 2, 20, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 20, 20, 20, 20, 20, 20, 2, 2, 2, 2, 2, 2, 2, 2, 20, 2, 2, 20], [20, 20, 20, 5, 2, 2, 20, 2, 2, 2, 2, 2, 2, 2, 2, 20, 2, 2, 20], [20, 20, 20, 20, 20, 21, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 20, 20, 20, 20, 4, 4, 2, 2, 2, 20, 2, 2, 2, 2, 2, 20, 2, 20], [20, 2, 2, 2, 4, 2, 2, 2, 2, 2, 20, 2, 2, 2, 2, 2, 2, 2, 20], [20, 2, 20, 20, 4, 2, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20], [20, 2, 20, 20, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 2, 20], [20, 2, 2, 2, 4, 2, 20, 20, 2, 2, 20, 20, 2, 2, 20, 2, 2, 2, 20], [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]];
        }
        if (lastStageSolved == true) {
            myMap[1][17] = 7;
        }
        buildMap();
        goal = 179;
        movablePositionX = 540;
        movablePositionY = 300;
        movable._x = movablePositionX;
        movable._y = movablePositionY;
        warp1X = 324;
        warp1Y = 156;
        warp2X = 516;
        warp2Y = 108;
    }
    function buildLevel19() {
        if (randomNumber == 0) {
            myMap = [[20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20], [20, 5, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 20, 20, 20, 20, 20], [20, 2, 2, 2, 2, 2, 20, 20, 20, 2, 2, 2, 2, 13, 13, 13, 13, 20, 20], [20, 20, 20, 20, 2, 2, 20, 3, 20, 2, 2, 2, 2, 20, 20, 20, 13, 13, 20], [20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 13, 13, 13, 20, 20], [20, 2, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 13, 20, 20, 20, 20], [20, 2, 20, 20, 20, 2, 2, 2, 2, 2, 2, 2, 2, 20, 13, 20, 20, 13, 20], [20, 21, 20, 2, 2, 2, 2, 2, 2, 2, 11, 2, 2, 20, 13, 13, 13, 13, 20], [20, 2, 20, 20, 20, 2, 2, 2, 2, 2, 4, 2, 2, 20, 13, 20, 20, 13, 20], [20, 2, 20, 4, 4, 2, 2, 2, 2, 20, 2, 20, 2, 20, 20, 13, 13, 13, 20], [20, 4, 2, 4, 2, 20, 2, 2, 2, 20, 2, 2, 2, 20, 20, 20, 13, 20, 20], [20, 2, 20, 2, 20, 20, 2, 11, 2, 20, 2, 2, 2, 2, 20, 20, 13, 13, 20], [20, 2, 2, 4, 2, 20, 2, 2, 2, 20, 2, 2, 2, 4, 4, 6, 20, 13, 20], [20, 2, 2, 2, 2, 20, 20, 20, 20, 20, 2, 2, 20, 20, 20, 20, 20, 14, 20], [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]];
        } else {
            myMap = [[20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20], [20, 5, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 20, 20, 20, 20, 20], [20, 2, 2, 2, 2, 2, 20, 20, 20, 2, 2, 2, 2, 13, 13, 13, 13, 20, 20], [20, 20, 20, 20, 2, 2, 20, 3, 20, 2, 2, 2, 2, 20, 20, 20, 13, 13, 20], [20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 13, 13, 13, 20, 20], [20, 2, 20, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 13, 20, 20, 20, 20], [20, 2, 20, 20, 20, 2, 2, 2, 2, 2, 2, 2, 2, 20, 13, 20, 20, 13, 20], [20, 21, 20, 2, 2, 2, 2, 2, 2, 2, 11, 2, 2, 20, 13, 13, 13, 13, 20], [20, 2, 20, 20, 20, 2, 2, 2, 2, 2, 4, 2, 2, 20, 13, 20, 20, 13, 20], [20, 2, 20, 2, 4, 2, 2, 2, 2, 20, 2, 20, 2, 20, 20, 13, 13, 13, 20], [20, 4, 2, 4, 4, 20, 2, 2, 2, 20, 2, 2, 2, 20, 20, 20, 13, 20, 20], [20, 2, 20, 2, 20, 20, 2, 11, 2, 20, 2, 2, 2, 2, 20, 20, 13, 13, 20], [20, 2, 2, 4, 2, 20, 2, 2, 2, 20, 2, 2, 2, 4, 4, 6, 20, 13, 20], [20, 2, 2, 2, 2, 20, 20, 20, 20, 20, 2, 2, 20, 20, 20, 20, 20, 14, 20], [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]];
        }
        buildMap();
        goal = 172;
        movablePositionX = 444;
        movablePositionY = 228;
        movable._x = movablePositionX;
        movable._y = movablePositionY;
        warp1X = 324;
        warp1Y = 324;
        warp2X = 396;
        warp2Y = 228;
    }
    function buildLevel20() {
        myMap
        buildMap();
        movablePositionX = 3000;
        movablePositionY = 3000;
        movable._x = movablePositionX;
        movable._y = movablePositionY;
        warp1X = 3000;
        warp1Y = 3000;
        warp2X = 3000;
        warp2Y = 3000;
        removeMovieClip("player");
    }
    function pushTileUP() {
        if (((movablePositionX == player._x) && ((movablePositionY + movespeed) == player._y)) && (mWallUP == false)) {
            slideUP = true;
            moveSound.start(0, 1);
        }
    }
    function pushTileDOWN() {
        if (((movablePositionX == player._x) && ((movablePositionY - movespeed) == player._y)) && (mWallDOWN == false)) {
            slideDOWN = true;
            moveSound.start(0, 1);
        }
    }
    function pushTileLEFT() {
        if ((((movablePositionX + movespeed) == player._x) && (movablePositionY == player._y)) && (mWallLEFT == false)) {
            slideLEFT = true;
            moveSound.start(0, 1);
        }
    }
    function pushTileRIGHT() {
        if ((((movablePositionX - movespeed) == player._x) && (movablePositionY == player._y)) && (mWallRIGHT == false)) {
            slideRIGHT = true;
            moveSound.start(0, 1);
        }
    }
    function changeTile() {
        if (currentTile == 2) {
            myMap[tileY][tileX] = 22;
            this.map[(("t_" + tileY) + "_") + tileX].gotoAndStop(22);
            tilesFlipped = tilesFlipped + 1;
            snowMelted++;
            if ((saveSnowMelted + snowMelted) == 480) {
                detectAchievement(68);
            }
        } else if (currentTile == 4) {
            myMap[tileY][tileX] = 2;
            this.map[(("t_" + tileY) + "_") + tileX].gotoAndStop(2);
            tilesFlipped = tilesFlipped + 1;
            iceSound.start(0, 1);
        } else if (currentTileDOWN == 14) {
            warpSound.start(0, 1);
            secretArea1();
            detectAchievement(66);
        }
        waitplayer = 4;
    }
    function buildLevel() {
        if (stageMap == 1) {
            buildLevel1();
        } else if (stageMap == 2) {
            buildLevel2();
        } else if (stageMap == 3) {
            buildLevel3();
        } else if (stageMap == 4) {
            buildLevel4();
        } else if (stageMap == 5) {
            buildLevel5();
        } else if (stageMap == 6) {
            buildLevel6();
        } else if (stageMap == 7) {
            buildLevel7();
        } else if (stageMap == 8) {
            buildLevel8();
        } else if (stageMap == 9) {
            buildLevel9();
        } else if (stageMap == 10) {
            buildLevel10();
        } else if (stageMap == 11) {
            buildLevel11();
        } else if (stageMap == 12) {
            buildLevel12();
        } else if (stageMap == 13) {
            buildLevel13();
        } else if (stageMap == 14) {
            buildLevel14();
        } else if (stageMap == 15) {
            buildLevel15();
        } else if (stageMap == 16) {
            buildLevel16();
        } else if (stageMap == 17) {
            buildLevel17();
        } else if (stageMap == 18) {
            buildLevel18();
        } else if (stageMap == 19) {
            buildLevel19();
        } else if (stageMap == 20) {
            buildLevel20();
        }
        playerPositionX = saveplayerX;
        playerPositionY = saveplayerY;
        player._x = saveplayerX;
        player._y = saveplayerY;
        player.gotoAndStop(1);
        if (previousMap < stageMap) {
            previousMap = previousMap + 1;
        }
        if (previousMap == stageMap) {
            player.gotoAndStop(3);
            previousMap = previousMap - 1;
        }
        keys = 0;
        warp1._x = warp1X;
        warp1._y = warp1Y;
        warp2._x = warp2X;
        warp2._y = warp2Y;
        warp1.gotoAndPlay(1);
        warp2.gotoAndPlay(1);
        warps = true;
        warpsWall = true;
        tilesFlipped = 0;
        bonuspoints = 0;
        snowMelted = 0;
    }
    function secretArea1() {
        myMap[2][13] = 20;
        this.map.t_2_13.gotoAndStop(20);
        myMap[3][13] = 2;
        this.map.t_3_13.gotoAndStop(2);
        myMap[9][14] = 2;
        this.map.t_9_14.gotoAndStop(2);
        if (solvedStagesCount >= 1) {
            myMap[8][14] = 7;
            this.map.t_8_14.gotoAndStop(7);
        } else {
            myMap[8][14] = 2;
            this.map.t_8_14.gotoAndStop(2);
        }
        myMap[7][14] = 2;
        this.map.t_7_14.gotoAndStop(2);
        if (solvedStagesCount >= 2) {
            myMap[6][14] = 7;
            this.map.t_6_14.gotoAndStop(7);
        } else {
            myMap[6][14] = 2;
            this.map.t_6_14.gotoAndStop(2);
        }
        myMap[5][14] = 2;
        this.map.t_5_14.gotoAndStop(2);
        if (solvedStagesCount >= 3) {
            myMap[4][14] = 7;
            this.map.t_4_14.gotoAndStop(7);
        } else {
            myMap[4][14] = 2;
            this.map.t_4_14.gotoAndStop(2);
        }
        myMap[3][14] = 2;
        this.map.t_3_14.gotoAndStop(2);
        if (solvedStagesCount >= 4) {
            myMap[2][14] = 7;
            this.map.t_2_14.gotoAndStop(7);
        } else {
            myMap[2][14] = 2;
            this.map.t_2_14.gotoAndStop(2);
        }
        myMap[1][14] = 2;
        this.map.t_1_14.gotoAndStop(2);
        myMap[10][15] = 2;
        this.map.t_10_15.gotoAndStop(2);
        if (solvedStagesCount >= 9) {
            myMap[9][15] = 7;
            this.map.t_9_15.gotoAndStop(7);
        } else {
            myMap[9][15] = 2;
            this.map.t_9_15.gotoAndStop(2);
        }
        myMap[8][15] = 2;
        this.map.t_8_15.gotoAndStop(2);
        if (solvedStagesCount >= 8) {
            myMap[7][15] = 7;
            this.map.t_7_15.gotoAndStop(7);
        } else {
            myMap[7][15] = 2;
            this.map.t_7_15.gotoAndStop(2);
        }
        myMap[6][15] = 2;
        this.map.t_6_15.gotoAndStop(2);
        if (solvedStagesCount >= 7) {
            myMap[5][15] = 7;
            this.map.t_5_15.gotoAndStop(7);
        } else {
            myMap[5][15] = 2;
            this.map.t_5_15.gotoAndStop(2);
        }
        myMap[4][15] = 2;
        this.map.t_4_15.gotoAndStop(2);
        if (solvedStagesCount >= 6) {
            myMap[3][15] = 7;
            this.map.t_3_15.gotoAndStop(7);
        } else {
            myMap[3][15] = 2;
            this.map.t_3_15.gotoAndStop(2);
        }
        myMap[2][15] = 2;
        this.map.t_2_15.gotoAndStop(2);
        if (solvedStagesCount >= 5) {
            myMap[1][15] = 7;
            this.map.t_1_15.gotoAndStop(7);
        } else {
            myMap[1][15] = 2;
            this.map.t_1_15.gotoAndStop(2);
        }
        myMap[11][16] = 20;
        this.map.t_11_16.gotoAndStop(20);
        myMap[10][16] = 2;
        this.map.t_10_16.gotoAndStop(2);
        myMap[9][16] = 2;
        this.map.t_9_16.gotoAndStop(2);
        if (solvedStagesCount >= 10) {
            myMap[8][16] = 7;
            this.map.t_8_16.gotoAndStop(7);
        } else {
            myMap[8][16] = 2;
            this.map.t_8_16.gotoAndStop(2);
        }
        myMap[7][16] = 2;
        this.map.t_7_16.gotoAndStop(2);
        if (solvedStagesCount >= 11) {
            myMap[6][16] = 7;
            this.map.t_6_16.gotoAndStop(7);
        } else {
            myMap[6][16] = 2;
            this.map.t_6_16.gotoAndStop(2);
        }
        myMap[5][16] = 2;
        this.map.t_5_16.gotoAndStop(2);
        if (solvedStagesCount >= 12) {
            myMap[4][16] = 7;
            this.map.t_4_16.gotoAndStop(7);
        } else {
            myMap[4][16] = 2;
            this.map.t_4_16.gotoAndStop(2);
        }
        myMap[3][16] = 2;
        this.map.t_3_16.gotoAndStop(2);
        if (solvedStagesCount >= 13) {
            myMap[2][16] = 7;
            this.map.t_2_16.gotoAndStop(7);
        } else {
            myMap[2][16] = 2;
            this.map.t_2_16.gotoAndStop(2);
        }
        myMap[1][16] = 2;
        this.map.t_1_16.gotoAndStop(2);
        myMap[13][17] = 3;
        this.map.t_13_17.gotoAndStop(15);
        myMap[12][17] = 2;
        this.map.t_12_17.gotoAndStop(2);
        myMap[11][17] = 2;
        this.map.t_11_17.gotoAndStop(2);
        myMap[10][17] = 2;
        this.map.t_10_17.gotoAndStop(2);
        if (solvedStagesCount >= 18) {
            myMap[9][17] = 7;
            this.map.t_9_17.gotoAndStop(7);
        } else {
            myMap[9][17] = 2;
            this.map.t_9_17.gotoAndStop(2);
        }
        myMap[8][17] = 2;
        this.map.t_8_17.gotoAndStop(2);
        if (solvedStagesCount >= 17) {
            myMap[7][17] = 7;
            this.map.t_7_17.gotoAndStop(7);
        } else {
            myMap[7][17] = 2;
            this.map.t_7_17.gotoAndStop(2);
        }
        myMap[6][17] = 2;
        this.map.t_6_17.gotoAndStop(2);
        if (solvedStagesCount >= 16) {
            myMap[5][17] = 7;
            this.map.t_5_17.gotoAndStop(7);
        } else {
            myMap[5][17] = 2;
            this.map.t_5_17.gotoAndStop(2);
        }
        myMap[4][17] = 2;
        this.map.t_4_17.gotoAndStop(2);
        if (solvedStagesCount >= 15) {
            myMap[3][17] = 7;
            this.map.t_3_17.gotoAndStop(7);
        } else {
            myMap[3][17] = 2;
            this.map.t_3_17.gotoAndStop(2);
        }
        myMap[2][17] = 2;
        this.map.t_2_17.gotoAndStop(2);
        if (solvedStagesCount >= 14) {
            myMap[1][17] = 7;
            this.map.t_1_17.gotoAndStop(7);
        } else {
            myMap[1][17] = 2;
            this.map.t_1_17.gotoAndStop(2);
        }
        myMap[11][18] = 20;
        this.map.t_11_18.gotoAndStop(20);
        myMap[10][18] = 20;
        this.map.t_10_18.gotoAndStop(20);
        myMap[9][18] = 20;
        this.map.t_9_18.gotoAndStop(20);
        myMap[8][18] = 20;
        this.map.t_8_18.gotoAndStop(20);
        myMap[7][18] = 20;
        this.map.t_7_18.gotoAndStop(20);
    }
    function detectAchievement($idNum) {
        if (this[("achievement" + $idNum) + "Done"] == false) {
            this[("achievement" + $idNum) + "Done"] = true;
            com.clubpenguin.util.Stamp.sendStamp($idNum);
        }
    }
    levelText.text = com.clubpenguin.util.LocaleText.getText("ingame_level").toUpperCase();
    solvedText.text = com.clubpenguin.util.LocaleText.getText("ingame_solved").toUpperCase();
    pointsText.text = com.clubpenguin.util.LocaleText.getText("ingame_points").toUpperCase();
    stop();
    var SHELL = _global.getCurrentShell();
    var isMember = SHELL.isMyPlayerMember();
    movespeed = 24;
    score = 0;
    savescore = 0;
    bonuspoints = 0;
    saveBonusPointsCount = 0;
    tilesFlipped = 0;
    saveTilesFlipped = 0;
    snowMelted = 0;
    saveSnowMelted = 0;
    tally = 0;
    goal = 12;
    stageMap = 1;
    previousMap = 0;
    solvedStagesCount = 0;
    lastStageSolved = false;
    solvedPoints = 0;
    timepoints = 0;
    countdown = 1000;
    countframe = 0;
    tries = 1;
    firstTryPoints = 0;
    firstTriesCount = 0;
    saveplayerX = 492;
    saveplayerY = 300;
    playerPositionX = 492;
    playerPositionY = 300;
    movablePositionX = 3000;
    movablePositionY = 3000;
    warp1X = 3000;
    warp1Y = 3000;
    warp2X = 3000;
    warp2Y = 3000;
    waitplayer = 0;
    waitslide = 0;
    keys = 0;
    keypress = false;
    wallSlide = 0;
    wallUP = false;
    wallDOWN = false;
    wallLEFT = false;
    wallRIGHT = false;
    warps = true;
    warpsWall = true;
    lastLevel = 19;
    this.createEmptyMovieClip("soundInstance", this.getNextHighestDepth());
    var completeSound = new Sound(this.soundInstance);
    completeSound.attachSound("25");
    var moneySound = new Sound(this.soundInstance);
    moneySound.attachSound("12");
    var keySound = new Sound(this.soundInstance);
    keySound.attachSound("23");
    var iceSound = new Sound(this.soundInstance);
    iceSound.attachSound("9");
    var moveSound = new Sound(this.soundInstance);
    moveSound.attachSound("29");
    var warpSound = new Sound(this.soundInstance);
    warpSound.attachSound("19");
    randomNumber = random(2);
    myMap = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];
    mapWidth = myMap[0].length;
    mapHeight = myMap.length;
    tileSize = 24;
    startX = 156;
    startY = 60;
    this.createEmptyMovieClip("map", 50);
    map._x = startX;
    map._y = startY;
    this.attachMovie("player", "player", 55);
    player._x = saveplayerX;
    player._y = saveplayerY;
    player.gotoAndStop(3);
    this.attachMovie("movable", "movable", 54);
    movable._x = movablePositionX;
    movable._y = movablePositionY;
    this.attachMovie("warp", "warp1", 51);
    warp1._x = warp1X;
    warp1._y = warp1Y;
    this.attachMovie("warp", "warp2", 52);
    warp2._x = warp2X;
    warp2._y = warp2Y;
    buildLevel1();
    onEnterFrame = function () {
        tileX = Math.floor((player._x - map._x) / tileSize);
        tileY = Math.floor((player._y - map._y) / tileSize);
        currentTile = myMap[tileY][tileX];
        currentTileUP = myMap[tileY - 1][tileX];
        currentTileDOWN = myMap[tileY + 1][tileX];
        currentTileLEFT = myMap[tileY][tileX - 1];
        currentTileRIGHT = myMap[tileY][tileX + 1];
        if (currentTileUP >= 20) {
            wallUP = true;
            if ((currentTileUP == 21) && (keys > 0)) {
                keys = keys - 1;
                myMap[tileY - 1][tileX] = 2;
                this.map[(("t_" + (tileY - 1)) + "_") + tileX].gotoAndStop(2);
                keySound.start(0, 1);
            }
        } else if ((((movablePositionY + movespeed) == player._y) && (movablePositionX == player._x)) && (mWallUP == true)) {
            wallUP = true;
        } else {
            wallUP = false;
        }
        if (currentTileDOWN >= 20) {
            wallDOWN = true;
            if ((currentTileDOWN == 21) && (keys > 0)) {
                keys = keys - 1;
                myMap[tileY + 1][tileX] = 2;
                this.map[(("t_" + (tileY + 1)) + "_") + tileX].gotoAndStop(2);
                keySound.start(0, 1);
            }
        } else if ((((movablePositionY - movespeed) == player._y) && (movablePositionX == player._x)) && (mWallDOWN == true)) {
            wallDOWN = true;
        } else {
            wallDOWN = false;
        }
        if (currentTileLEFT >= 20) {
            wallLEFT = true;
            if ((currentTileLEFT == 21) && (keys > 0)) {
                keys = keys - 1;
                myMap[tileY][tileX - 1] = 2;
                this.map[(("t_" + tileY) + "_") + (tileX - 1)].gotoAndStop(2);
                keySound.start(0, 1);
            }
        } else if ((((movablePositionX + movespeed) == player._x) && (movablePositionY == player._y)) && (mWallLEFT == true)) {
            wallLEFT = true;
        } else {
            wallLEFT = false;
        }
        if (currentTileRIGHT >= 20) {
            wallRIGHT = true;
            if ((currentTileRIGHT == 21) && (keys > 0)) {
                keys = keys - 1;
                myMap[tileY][tileX + 1] = 2;
                this.map[(("t_" + tileY) + "_") + (tileX + 1)].gotoAndStop(2);
                keySound.start(0, 1);
            }
        } else if ((((movablePositionX - movespeed) == player._x) && (movablePositionY == player._y)) && (mWallRIGHT == true)) {
            wallRIGHT = true;
        } else {
            wallRIGHT = false;
        }
        if ((warp1.hitTest(player._x, player._y) && (warps == true)) && (waitplayer == 0)) {
            warpSound.start(0, 1);
            wallUP = true;
            wallRIGHT = true;
            wallDOWN = true;
            wallLEFT = true;
            player._x = warp2._x;
            player._y = warp2._y;
            playerPositionX = warp2._x;
            playerPositionY = warp2._y;
            warps = false;
        } else if ((warp2.hitTest(player._x, player._y) && (warps == true)) && (waitplayer == 0)) {
            warpSound.start(0, 1);
            wallUP = true;
            wallRIGHT = true;
            wallDOWN = true;
            wallLEFT = true;
            player._x = warp1._x;
            player._y = warp1._y;
            playerPositionX = warp1._x;
            playerPositionY = warp1._y;
            warps = false;
        } else if (((((wallUP == true) && (wallDOWN == true)) && (wallLEFT == true)) && (wallRIGHT == true)) && (waitplayer == 0)) {
            this.map[(("t_" + tileY) + "_") + tileX].gotoAndStop(12);
        }
        mTileX = Math.floor((movablePositionX - map._x) / tileSize);
        mTileY = Math.floor((movablePositionY - map._y) / tileSize);
        currentMTile = myMap[mTileY][mTileX];
        currentMTileUP = myMap[mTileY - 1][mTileX];
        currentMTileDOWN = myMap[mTileY + 1][mTileX];
        currentMTileLEFT = myMap[mTileY][mTileX - 1];
        currentMTileRIGHT = myMap[mTileY][mTileX + 1];
        if (currentMTileUP >= 20) {
            mWallUP = true;
        } else {
            mWallUP = false;
        }
        if (currentMTileDOWN >= 20) {
            mWallDOWN = true;
        } else {
            mWallDOWN = false;
        }
        if (currentMTileLEFT >= 20) {
            mWallLEFT = true;
        } else {
            mWallLEFT = false;
        }
        if (currentMTileRIGHT >= 20) {
            mWallRIGHT = true;
        } else {
            mWallRIGHT = false;
        }
        if (warps == true) {
            if (currentTileUP == 11) {
                warp1.gotoAndStop("charge");
                warp2.gotoAndStop("charge");
            } else if (currentTileDOWN == 11) {
                warp1.gotoAndStop("charge");
                warp2.gotoAndStop("charge");
            } else if (currentTileLEFT == 11) {
                warp1.gotoAndStop("charge");
                warp2.gotoAndStop("charge");
            } else if (currentTileRIGHT == 11) {
                warp1.gotoAndStop("charge");
                warp2.gotoAndStop("charge");
            } else {
                warp1.gotoAndStop("normal");
                warp2.gotoAndStop("normal");
            }
        } else if (warps == false) {
            warp1.gotoAndStop("gone");
            warp2.gotoAndStop("gone");
        }
        if (currentTile == 7) {
            myMap[tileY][tileX] = 2;
            this.map[(("t_" + tileY) + "_") + tileX].gotoAndStop(2);
            bonuspoints = bonuspoints + 1;
            moneySound.start(0, 1);
            var _local_2 = saveBonusPointsCount + bonuspoints;
            if (_local_2 == 1) {
                detectAchievement(63);
            } else if (_local_2 == 3) {
                detectAchievement(64);
            } else if (_local_2 == 6) {
                detectAchievement(65);
            } else if (_local_2 == 10) {
                detectAchievement(67);
            } else if (_local_2 == 33) {
                detectAchievement(70);
            }
        } else if (currentTile == 6) {
            myMap[tileY][tileX] = 2;
            this.map[(("t_" + tileY) + "_") + tileX].gotoAndStop(2);
            keys = keys + 1;
            keySound.start(0, 1);
        } else if (currentTile == 8) {
            myMap[tileY][tileX] = 3;
            this.map[(("t_" + tileY) + "_") + tileX].gotoAndStop(3);
            keys = keys + 1;
            keySound.start(0, 1);
        } else if (currentTile == 9) {
            myMap[tileY][tileX] = 4;
            this.map[(("t_" + tileY) + "_") + tileX].gotoAndStop(4);
            keys = keys + 1;
            keySound.start(0, 1);
        } else if (((currentTile == 5) && (waitplayer == 0)) && (stageMap < lastLevel)) {
            if ((stageMap == 10) && (isMember == false)) {
                saveplayerX = 492;
                saveplayerY = 300;
                randomNumber = random(2);
                stageMap = 1;
                if (tilesFlipped == goal) {
                    solvedPoints = solvedPoints + tilesFlipped;
                    solvedStagesCount = solvedStagesCount + 1;
                    lastStageSolved = true;
                    solvedStages_tf.text = solvedStagesCount.toString();
                    completeSound.start(0, 1);
                    if (tries == 1) {
                        firstTryPoints = firstTryPoints + tilesFlipped;
                        firstTriesCount = firstTriesCount + 1;
                    }
                } else {
                    lastStageSolved = false;
                }
                saveTilesFlipped = saveTilesFlipped + tilesFlipped;
                tilesFlipped = 0;
                saveBonusPointsCount = saveBonusPointsCount + bonuspoints;
                bonuspoints = 0;
                tries = 1;
                buildLevel();
                if (tilesFlipped == goal) {
                    solvedPoints = solvedPoints + tilesFlipped;
                    solvedStagesCount = solvedStagesCount + 1;
                    lastStageSolved = true;
                    if (tries == 1) {
                        firstTryPoints = firstTryPoints + tilesFlipped;
                        firstTriesCount = firstTriesCount + 1;
                    }
                } else {
                    lastStageSolved = false;
                }
                if (solvedStagesCount == lastLevel) {
                    timepoints = countdown * 6;
                }
                saveTilesFlipped = saveTilesFlipped + tilesFlipped;
                tilesFlipped = 0;
                saveBonusPointsCount = saveBonusPointsCount + bonuspoints;
                bonuspoints = 0;
                saveSnowMelted = saveSnowMelted + snowMelted;
                snowMelted = 0;
                tries = 1;
                gotoAndStop ("endGame");
                stageMap = 20;
                buildLevel();
            } else {
                saveplayerX = player._x;
                saveplayerY = player._y;
                randomNumber = random(2);
                stageMap = stageMap + 1;
                if (tilesFlipped == goal) {
                    solvedPoints = solvedPoints + tilesFlipped;
                    solvedStagesCount = solvedStagesCount + 1;
                    solvedStages_tf.text = solvedStagesCount.toString();
                    lastStageSolved = true;
                    completeSound.start(0, 1);
                    if (tries == 1) {
                        firstTryPoints = firstTryPoints + tilesFlipped;
                        firstTriesCount = firstTriesCount + 1;
                    }
                } else {
                    lastStageSolved = false;
                }
                saveTilesFlipped = saveTilesFlipped + tilesFlipped;
                tilesFlipped = 0;
                saveBonusPointsCount = saveBonusPointsCount + bonuspoints;
                bonuspoints = 0;
                saveSnowMelted = saveSnowMelted + snowMelted;
                snowMelted = 0;
                tries = 1;
                buildLevel();
            }
        } else if ((currentTile == 5) && (stageMap == lastLevel)) {
            if (tilesFlipped == goal) {
                solvedPoints = solvedPoints + tilesFlipped;
                solvedStagesCount = solvedStagesCount + 1;
                lastStageSolved = true;
                if (tries == 1) {
                    firstTryPoints = firstTryPoints + tilesFlipped;
                    firstTriesCount = firstTriesCount + 1;
                }
            } else {
                lastStageSolved = false;
            }
            if (solvedStagesCount == lastLevel) {
                timepoints = countdown * 6;
            }
            saveTilesFlipped = saveTilesFlipped + tilesFlipped;
            tilesFlipped = 0;
            saveBonusPointsCount = saveBonusPointsCount + bonuspoints;
            bonuspoints = 0;
            saveSnowMelted = saveSnowMelted + snowMelted;
            snowMelted = 0;
            tries = 1;
            if (solvedStagesCount == 19) {
                detectAchievement(71);
            }
            gotoAndStop ("endGame");
            stageMap = stageMap + 1;
            buildLevel();
        }
        if ((Key.isDown(38) && (waitplayer == 0)) && (wallUP == false)) {
            pushTileUP();
            changeTile();
            playerPositionY = playerPositionY - movespeed;
        } else if ((Key.isDown(40) && (waitplayer == 0)) && (wallDOWN == false)) {
            pushTileDOWN();
            changeTile();
            playerPositionY = playerPositionY + movespeed;
        } else if ((Key.isDown(37) && (waitplayer == 0)) && (wallLEFT == false)) {
            pushTileLEFT();
            changeTile();
            playerPositionX = playerPositionX - movespeed;
        } else if ((Key.isDown(39) && (waitplayer == 0)) && (wallRIGHT == false)) {
            pushTileRIGHT();
            changeTile();
            playerPositionX = playerPositionX + movespeed;
        } else {
            keypress = false;
        }
        if (waitplayer > 0) {
            waitplayer = waitplayer - 1;
        }
        if (waitslide > 0) {
            waitslide = waitslide - 1;
        }
        if (player._y < playerPositionY) {
            player._y = player._y + 8;
        } else if (player._y > playerPositionY) {
            player._y = player._y - 8;
        } else if (player._x > playerPositionX) {
            player._x = player._x - 8;
        } else if (player._x < playerPositionX) {
            player._x = player._x + 8;
        }
        if (warp1.hitTest(movablePositionX, movablePositionY) && (warpsWall == true)) {
            warpsWall = false;
            movablePositionX = warp2._x;
            movablePositionY = warp2._y;
            movable._x = warp2._x;
            movable._y = warp2._y;
        } else if (warp2.hitTest(movablePositionX, movablePositionY) && (warpsWall == true)) {
            warpsWall = false;
            movablePositionX = warp1._x;
            movablePositionY = warp1._y;
            movable._x = warp1._x;
            movable._y = warp1._y;
        } else if ((slideUP == true) && (waitslide == 0)) {
            if (mWallUP == false) {
                movablePositionY = movablePositionY - movespeed;
                waitslide = 3;
            } else {
                slideUP = false;
            }
        } else if ((slideDOWN == true) && (waitslide == 0)) {
            if (mWallDOWN == false) {
                movablePositionY = movablePositionY + movespeed;
                waitslide = 3;
            } else {
                slideDOWN = false;
            }
        } else if ((slideLEFT == true) && (waitslide == 0)) {
            if (mWallLEFT == false) {
                movablePositionX = movablePositionX - movespeed;
                waitslide = 3;
            } else {
                slideLEFT = false;
            }
        } else if ((slideRIGHT == true) && (waitslide == 0)) {
            if (mWallRIGHT == false) {
                movablePositionX = movablePositionX + movespeed;
                waitslide = 3;
            } else {
                slideRIGHT = false;
            }
        }
        if (movable._y < movablePositionY) {
            movable._y = movable._y + 8;
        } else if (movable._y > movablePositionY) {
            movable._y = movable._y - 8;
        } else if (movable._x > movablePositionX) {
            movable._x = movable._x - 8;
        } else if (movable._x < movablePositionX) {
            movable._x = movable._x + 8;
        }
        if (stageMap == 13) {
            if (movable._x == 276) {
                if (movable._y == 180) {
                    if (movable1Done == false) {
                        movable1Done = true;
                        this.movablesDone++;
                    }
                }
            }
        } else if (stageMap == 14) {
            if (movable._x == 204) {
                if (movable._y == 372) {
                    if (movable2Done == false) {
                        movable2Done = true;
                        this.movablesDone++;
                    }
                }
            }
        } else if (stageMap == 15) {
            if (movable._x == 180) {
                if (movable._y == 276) {
                    if (movable3Done == false) {
                        movable3Done = true;
                        this.movablesDone++;
                    }
                }
            }
        } else if (stageMap == 16) {
            if (movable._x == 372) {
                if (movable._y == 372) {
                    if (movable4Done == false) {
                        movable4Done = true;
                        this.movablesDone++;
                    }
                }
            }
        } else if (stageMap == 17) {
            if (movable._x == 348) {
                if (movable._y == 84) {
                    if (movable5Done == false) {
                        movable5Done = true;
                        this.movablesDone++;
                    }
                }
            }
        } else if (stageMap == 18) {
            if (movable._x == 180) {
                if (movable._y == 108) {
                    if (movable6Done == false) {
                        movable6Done = true;
                        this.movablesDone++;
                    }
                }
            }
        } else if (stageMap == 19) {
            if (movable._x == 324) {
                if (movable._y == 132) {
                    if (movable7Done == false) {
                        movable7Done = true;
                        this.movablesDone++;
                        if (this.movablesDone == 7) {
                            detectAchievement(69);
                        }
                    }
                }
            }
        }
        score = (((((tilesFlipped + saveTilesFlipped) + solvedPoints) + (bonuspoints * 100)) + (saveBonusPointsCount * 100)) + firstTryPoints) + timepoints;
        if (tally < (score - 110)) {
            tally = tally + 110;
        } else if (tally < (score - 11)) {
            tally = tally + 11;
        } else if (tally < score) {
            tally = tally + 1;
        } else if (tally > score) {
            tally = score;
        }
        if (countdown > 0) {
            if (countframe < 24) {
                countframe = countframe + 1;
            } else if (countframe == 24) {
                countframe = 0;
                countdown = countdown - 1;
            }
        }
        if (Key.isDown(38)) {
            buttonUP.gotoAndPlay("down");
        } else if (Key.isDown(40)) {
            buttonDOWN.gotoAndPlay("down");
        } else if (Key.isDown(37)) {
            buttonLEFT.gotoAndPlay("down");
        } else if (Key.isDown(39)) {
            buttonRIGHT.gotoAndPlay("down");
        }
        btn_reset.onRelease = function () {
            tries = tries + 1;
            buildLevel();
        };
    };
    this.achievement63Done = false;
    this.achievement64Done = false;
    this.achievement65Done = false;
    this.achievement66Done = false;
    this.achievement67Done = false;
    this.achievement68Done = false;
    this.achievement69Done = false;
    this.achievement70Done = false;
    this.achievement71Done = false;
    this.movable1Done = false;
    this.movable2Done = false;
    this.movable3Done = false;
    this.movable4Done = false;
    this.movable5Done = false;
    this.movable6Done = false;
    this.movable7Done = false;
    this.movablesDone = 0;
